Detalhamento do Trabalho da Faculdade - Implementação de um Simulador de Sistema de Arquivos
Objetivo

Você precisa implementar um simulador de sistemas de arquivos em C que funcione no GNU/Linux. A interação será feita através do shell, utilizando um prompt de comandos.
Estrutura Básica

    Atributos dos Arquivos:
        Nome
        Tamanho em bytes (exceto diretórios)
        Data de criação
        Data da última modificação
        Data do último acesso
        Dados do arquivo (apenas texto puro)

    Comandos a Serem Implementados:
        monta arquivo: Monta o sistema de arquivos simulado a partir de um arquivo existente ou cria um novo.
        copia origem destino: Copia um arquivo de texto do sistema de arquivos real para o simulado.
        criadir diretorio: Cria um novo diretório.
        apagadir diretorio: Apaga um diretório e todo o seu conteúdo.
        mostra arquivo: Exibe o conteúdo de um arquivo.
        toca arquivo: Atualiza a data de acesso de um arquivo ou cria um novo arquivo vazio.
        apaga arquivo: Remove um arquivo.
        lista diretorio: Lista o conteúdo de um diretório.
        atualizadb: Cria um banco de dados em memória com a árvore de arquivos e diretórios.
        busca string: Busca no banco de dados se há algum arquivo ou diretório com a string no nome.
        status: Exibe informações sobre o sistema de arquivos (quantidade de arquivos e diretórios, espaço livre e desperdiçado).
        desmonta: Desmonta o sistema de arquivos.
        sai: Sai do simulador.

Detalhes de Implementação

    Estrutura de Dados:
        Utilizar uma estrutura hierárquica para representar os diretórios e arquivos, começando do diretório raiz /.
        Implementar a estrutura de diretórios como listas ligadas onde cada diretório contém entradas para seus arquivos e subdiretórios.

    Armazenamento e Gerenciamento:
        Tamanho máximo: O sistema deve suportar até 100MB de dados e metadados.
        Tamanho de bloco: Cada bloco tem 4KB.
        Armazenamento de arquivos: Utilizar uma abordagem similar ao FAT (File Allocation Table).
        Gerenciamento de espaço livre: Utilizar um bitmap para gerenciar blocos livres.

    Implementação dos Comandos:
        monta arquivo:
            Se o arquivo existir, ler e reconstruir a estrutura do sistema de arquivos.
            Se não existir, criar um novo sistema de arquivos.
        copia origem destino:
            Ler o arquivo de origem do sistema de arquivos real.
            Escrever o conteúdo no destino no sistema simulado.
        criadir diretorio:
            Adicionar uma entrada de diretório na estrutura de diretórios.
        apagadir diretorio:
            Recursivamente apagar todos os arquivos e subdiretórios.
        mostra arquivo:
            Ler o conteúdo do arquivo simulado e exibir na tela.
        toca arquivo:
            Atualizar a data de acesso do arquivo ou criar um novo arquivo.
        apaga arquivo:
            Remover a entrada do arquivo e liberar os blocos usados.
        lista diretorio:
            Exibir as entradas do diretório com informações detalhadas.
        atualizadb:
            Construir uma árvore em memória contendo caminhos e nomes dos arquivos e diretórios.
        busca string:
            Buscar no banco de dados por arquivos e diretórios que contenham a string no nome.
        status:
            Calcular e exibir a quantidade de arquivos, diretórios, espaço livre e desperdiçado.
        desmonta:
            Salvar o estado atual do sistema de arquivos no arquivo e liberar recursos.
        sai:
            Encerrar o simulador.

Considerações Finais

    Validação de Erros: Implementar validações para garantir que os comandos sejam executados corretamente e tratar erros (e.g., espaço insuficiente, arquivos inexistentes).
    Persistência: Garantir que o estado do sistema de arquivos seja mantido entre execuções.
    Performance: Otimizar o gerenciamento de espaço e as operações de leitura/escrita para garantir eficiência.

Exemplos de Estruturas em C

c

typedef struct {
    char nome[100];
    int tamanho;  // Em bytes, 0 para diretórios
    time_t criado;
    time_t modificado;
    time_t acessado;
    char* dados;  // Ponteiro para os dados do arquivo, NULL para diretórios
} Arquivo;

typedef struct No {
    Arquivo arquivo;
    struct No* prox;  // Próximo arquivo ou diretório no mesmo nível
    struct No* filhos;  // Primeiro arquivo ou diretório dentro deste diretório
} No;

Funções Necessárias

    Inicialização do sistema de arquivos (monta).
    Funções para manipular arquivos e diretórios (criadir, apagadir, mostra, etc.).
    Funções auxiliares para gerenciamento de FAT e bitmap.

Essa é a base para o projeto. A partir daqui, você pode começar a dividir as tarefas específicas e implementar cada parte do simulador.